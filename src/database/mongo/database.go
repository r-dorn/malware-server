package mongo

import (
	"context"
	"errors"
	"log"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"server.com/src/config"
)

var col mongo.Collection

func ConnectDatabase(dbSettings config.DatabaseConfig) {
	client, err := mongo.Connect(context.TODO(), options.Client().ApplyURI(
		dbSettings.Mongodb.Connection,
	))
	if err != nil {
		log.Fatal(err)
	}
	col = *client.Database(dbSettings.Mongodb.Database).Collection(dbSettings.Mongodb.Collection)
}

func documentExists(query bson.D) bool {
	amount, err := col.CountDocuments(context.TODO(), query, options.Count().SetLimit(1))
	return amount == 1 && err == nil
}

func FindByQuery[T any](query bson.D) (result T, returnErr error) {
	if documentExists(query) {
		return *new(T), errors.New("no documents matching provided query")
	}
	if err := col.FindOne(context.TODO(), query).Decode(result); err != nil {
		returnErr = err
	}
	return result, returnErr
}

func InsertDocument[T any](document T, existingQuery bson.D) (string, error) {
	if documentExists(existingQuery) {
		return "", errors.New("cannot insert conflicting document")
	}
	result, err := col.InsertOne(context.TODO(), document)
	return result.InsertedID.(string), err
}
