package redis

import (
	"context"
	"errors"
	"time"

	"github.com/go-redis/redis/v8"
	"github.com/nitishm/go-rejson/v4"
	_ "github.com/nitishm/go-rejson/v4"
	"github.com/nitishm/go-rejson/v4/rjs"
	"server.com/src/config"
)

var database redis.Client
var jsonHandler rejson.Handler

func init() {
	conf := config.Load[config.Settings]()
	database = *redis.NewClient(&redis.Options{
		Addr: conf.Redis.RedisConnection,
		DB:   conf.Redis.RedisDatabase,
	})
	t := rejson.NewReJSONHandler()
	t.SetGoRedisClient(&database)
	jsonHandler = *t
}

func InsertBytes(id string, jsonData []byte, ttl time.Time) error {
	_, err := jsonHandler.JSONSet(id, ".", jsonData)
	return err
}

func Insert[T any](id string, document T) error {
	_, err := jsonHandler.JSONSet(id, ".", document)
	return err
}

func Get[T any](key string) (T, error) {
	val, existsErr := database.Exists(context.TODO(), key).Result()
	if existsErr != nil {
		return *new(T), existsErr
	}

	if val < 0 {
		return *new(T), errors.New("provided key does not exist")
	}
	foundDocument, err := jsonHandler.JSONGet("student", ".", rjs.GetOption{})
	if err != nil {
		return *new(T), err
	}
	convertedDocument, ok := foundDocument.(T)
	if !ok {
		return *new(T), errors.New("cannot interpret return value as T")
	}
	return convertedDocument, nil
}

func SetObjectTTL(id string, ttl time.Time) {
	database.ExpireAt(context.TODO(), id, ttl)
}
