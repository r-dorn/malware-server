package redis

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/go-redis/redis/v8"
	"github.com/nitishm/go-rejson/v4"
	_ "github.com/nitishm/go-rejson/v4"
	"github.com/nitishm/go-rejson/v4/rjs"
	"server.com/src/config"
)

var Database redis.Client
var jsonHandler rejson.Handler

func init() {
	conf := config.Load[config.Settings]()
	Database = *redis.NewClient(&redis.Options{
		Addr:     fmt.Sprintf("%s:%d", conf.Redis.RedisConnection, conf.Redis.RedisPort),
		DB:       conf.Redis.RedisDatabase,
		Username: conf.Redis.Username,
		Password: conf.Redis.Password,
	})
	t := rejson.NewReJSONHandler()
	t.SetGoRedisClient(&Database)
	jsonHandler = *t
}

func InsertBytes(id string, jsonData []byte, ttl time.Time) error {
	_, err := jsonHandler.JSONSet(id, ".", jsonData)
	return err
}

func Insert[T any](id string, document T, ttl time.Duration) error {
	err := Database.Set(context.TODO(), id, document, ttl)
	return err.Err()
}

func GetJson[T any](key string) (T, error) {
	val, existsErr := Database.Exists(context.TODO(), key).Result()
	if existsErr != nil {
		return *new(T), existsErr
	}

	if val < 0 {
		return *new(T), errors.New("provided key does not exist")
	}
	foundDocument, err := jsonHandler.JSONGet("student", ".", rjs.GetOption{})
	if err != nil {
		return *new(T), err
	}
	convertedDocument, ok := foundDocument.(T)
	if !ok {
		return *new(T), errors.New("cannot interpret return value as T")
	}
	return convertedDocument, nil
}

func GetString(key string) string {
	foundDocument := Database.Get(context.TODO(), key)
	value, err := foundDocument.Result()
	if err != nil {
		return ""
	}
	return value
}

func SetObjectTTL(id string, ttl time.Duration) {
	Database.Expire(context.TODO(), id, ttl)
}

func Exists(key string) bool {
	val, err := Database.Exists(context.TODO(), key).Result()
	return val > 0 && err == nil
}
