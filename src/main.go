package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"

	"github.com/gin-gonic/gin"
	"server.com/src/api/routes"
	"server.com/src/config"
	sqldb "server.com/src/database/sqlite"
)

const DEFAULT_PORT int = 7070
const MAX_PORT int = 65535
const IP_ADDRESS string = "127.0.0.1"

func ApiStartup(addr string, port int, conf config.ServerConfig) {
	e := gin.Default()

	e.POST("/create/user", routes.CreateUser)
	e.POST("/login", func(c *gin.Context) {})

	e.Run(fmt.Sprintf(":%d", port)) // listen and serve on 0.0.0.0:8080}
}

func main() {
	username := flag.String("server-username", "", "username required to connect to c2c")
	password := flag.String("server-password", "", "password required to connect to c2c")
	startupPort := flag.Int("server-port", DEFAULT_PORT, "port to listen on")
	persisData := flag.Bool("persist-data", false, "save server configuration to database")

	flag.Parse()

	if *startupPort > MAX_PORT || *startupPort < 0 {
		log.Fatalf("port must be within 0..%d", MAX_PORT)
	}

	if !*persisData {
		print("not persisting")
		ApiStartup(IP_ADDRESS, *startupPort, config.ServerConfig{
			Username: username,
			Password: password,
			BindPort: uint16(*startupPort),
		})
	}

	dir, err := os.UserConfigDir()
	if err != nil {
		log.Fatal(err)
	}

	joinedPath := filepath.Join(
		dir,
		sqldb.DEFAULT_FILENAME,
	)

	database := sqldb.Open(joinedPath)
	database.Migrator().CreateTable(config.ServerConfig{})

	database.Create(config.ServerConfig{
		Username: username,
		Password: password,
		BindPort: uint16(*startupPort),
	})

	ApiStartup(IP_ADDRESS, *startupPort, config.ServerConfig{
		Username: username,
		Password: password,
		BindPort: uint16(*startupPort),
	})
}
