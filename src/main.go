package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"server.com/src/config"
)

const DEFAULT_PORT int = 7070
const MAX_PORT int = 65535
const DATABASE_FILENAME string = "settings.db"

func mockServerBind(addr string, port int, conf config.ServerConfig) {
	println("mock server bind")
}

func main() {
	username := flag.String("server-username", "", "username required to connect to c2c")
	password := flag.String("server-password", "", "password required to connect to c2c")
	startupPort := flag.Int("server-port", DEFAULT_PORT, "port to listen on")
	ForceAuth := flag.Bool("force-auth", false, "require auth to connect to c2c server")
	PersisData := flag.Bool("persist-data", false, "save server configuration to database")

	flag.Parse()

	if *startupPort > MAX_PORT || *startupPort < 0 {
		log.Fatal(fmt.Sprintf("port must be within 0..%i", MAX_PORT))
	}

	if *ForceAuth && *username == "" || *password == "" {
		log.Fatal("server requires authentication. Please set username and password")
	}

	if !*PersisData {
		mockServerBind("127.0.0.1", *startupPort, config.ServerConfig{
			Username:  username,
			Password:  password,
			ForceAuth: *ForceAuth,
			BindPort:  uint16(*startupPort),
		})
	}

	dir, err := os.UserConfigDir()
	if err != nil {
		log.Fatal(err)
	}

	joinedPath := filepath.Join(
		dir,
		DATABASE_FILENAME,
	)

	database, err := gorm.Open(sqlite.Open(joinedPath), &gorm.Config{})
	if err != nil {
		log.Fatal(err)
	}

	database.Migrator().CreateTable(config.ServerConfig{})

	database.Create(config.ServerConfig{
		Username:  username,
		Password:  password,
		ForceAuth: *ForceAuth,
		BindPort:  uint16(*startupPort),
	})

}
