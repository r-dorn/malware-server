package routes

import (
	"log"
	"os"
	"path/filepath"

	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/bson"
	"server.com/src/config"
	"server.com/src/database/mongo"
	"server.com/src/database/sqlite"
	user "server.com/src/models/User"
)

var SERVER_CONFIG config.ServerConfig

func init() {
	dir, err := os.UserConfigDir()
	if err != nil {
		log.Fatal(err)
	}
	SERVER_CONFIG = sqlite.LoadConfig(sqlite.Open(filepath.Join(
		dir,
		sqlite.DEFAULT_FILENAME,
	)))
	mongo.ConnectDatabase(config.Load[config.DatabaseConfig]())
}

func CreateUser(g *gin.Context) {
	var NewUser user.User

	err := g.ShouldBindJSON(&NewUser)
	if err != nil {
		g.JSON(400, map[string]string{
			"error": err.Error(),
		})
	}
	databaseUser, err := user.InternalUser{}.New(NewUser)
	if err != nil {
		g.JSON(400, map[string]string{
			"error": err.Error(),
		})
	}
	generatedID, err := mongo.InsertDocument(databaseUser, bson.D{{Key: "username", Value: NewUser.Username}})
	if err != nil {
		g.JSON(400, map[string]string{
			"error": err.Error(),
		})
		return
	}
	g.JSON(200, map[string]string{"user_id": generatedID})

}
