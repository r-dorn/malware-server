package routes

import (
	"log"
	"os"
	"path/filepath"

	"github.com/gin-contrib/sessions"
	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/bson"
	"golang.org/x/crypto/bcrypt"
	"server.com/src/config"
	"server.com/src/database/mongo"
	"server.com/src/database/sqlite"
	user "server.com/src/models/User"
)

var SERVER_CONFIG config.ServerConfig

func init() {
	dir, err := os.UserConfigDir()
	if err != nil {
		log.Fatal(err)
	}
	SERVER_CONFIG = sqlite.LoadConfig(sqlite.Open(filepath.Join(
		dir,
		sqlite.DEFAULT_FILENAME,
	)))
	mongo.ConnectDatabase(config.Load[config.Settings]())
}

// PingExample godoc
// @Summary create user
// @Schemes
// @Description add new user to database
// @Tags user
// @Accept json
// @Produce json
// @Success 200 {object} user.InternalUser
// @Router /api/v1/user/create/user [post]
// @Param        book  body      user.User  true  "new user"
func CreateUser(g *gin.Context) {
	var NewUser user.User

	err := g.ShouldBindJSON(&NewUser)
	if err != nil {
		g.JSON(400, gin.H{"error": err.Error()})
		return
	}
	databaseUser, err := user.InternalUser{}.New(NewUser)
	if err != nil {
		g.JSON(400, gin.H{"error": err.Error()})
		return
	}
	generatedID, err := mongo.InsertDocument(databaseUser, bson.D{{
		Key: "username", Value: NewUser.Username,
	}})
	if err != nil {
		g.JSON(400, gin.H{"error": err.Error()})
		return
	}
	g.JSON(200, map[string]string{"user_id": generatedID})
}

func LoginUser(g *gin.Context) {
	var loginRequest user.User
	sessionManager := sessions.Default(g)

	err := g.ShouldBindJSON(&loginRequest)
	if err != nil {
		g.JSON(400, gin.H{"error": err.Error()})
		return
	}
	foundUser, err := mongo.FindByQuery[user.InternalUser](bson.D{{
		Key: "username", Value: loginRequest.Username,
	}})
	if err != nil {
		g.JSON(200, gin.H{"error": err.Error()})
	}

	err = bcrypt.CompareHashAndPassword([]byte(foundUser.Password), []byte(loginRequest.Password))
	if err != nil {
		g.JSON(400, gin.H{"error": err.Error()})
	}
	sessionManager.Set(config.DATABASE_SETTINGS.SessionKey, foundUser.Id)
	sessionManager.AddFlash("Successfully logged in")
	if err := sessionManager.Save(); err != nil {
		g.JSON(400, gin.H{"error": err.Error()})
		return
	}
	g.JSON(200, gin.H{"success": "Successfully logged in"})
}
