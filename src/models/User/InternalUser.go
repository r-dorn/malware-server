package user

import (
	"github.com/google/uuid"
	"golang.org/x/crypto/bcrypt"
	"server.com/src/models/Victim"
)

type UserOptions struct {
	LockOnInvalidConnectionKey bool `bson:"lock_on_invalid_connection_key"`
}

type InternalUser struct {
	Id               string                  `bson:"_id", json:",omitempty"`
	Username         string                  `bson:"username"`
	Password         string                  `bson:"password"`
	Options          UserOptions             `bson:"options"`
	IsLocked         bool                    `bson:"is_locked"`
	ConnectedClients []Victim.InternalVictim `bson:"connected_clients"`
}

func (i InternalUser) New(user User) (InternalUser, error) {
	hash, err := bcrypt.GenerateFromPassword([]byte(user.Password), bcrypt.DefaultCost)
	if err != nil {
		return InternalUser{}, err
	}

	return InternalUser{
		Id:       uuid.New().String(),
		Username: user.Username,
		Password: string(hash),
		Options: UserOptions{
			LockOnInvalidConnectionKey: true,
		},
		IsLocked: false,
	}, nil
}
