package user

import (
	"math/rand"

	"github.com/google/uuid"
	"golang.org/x/crypto/bcrypt"
)

type UserOptions struct {
	LockOnInvalidConnectionKey bool   `bson:"lock_on_invalid_connection_key"`
	ConnectionKeyHmacSecret    string `bson:"hmac_secret"`
}

type InternalUser struct {
	Id               string      `bson:"_id"`
	Username         string      `bson:"username"`
	Password         string      `bson:"password"`
	Options          UserOptions `bson:"options"`
	ConnectedClients []string    `bson:"connected_clients"`
}

func (i InternalUser) New(user User) (InternalUser, error) {
	hash, err := bcrypt.GenerateFromPassword([]byte(user.Password), bcrypt.DefaultCost)
	if err != nil {
		return InternalUser{}, err
	}

	secretBytes := make([]byte, 32)

	if _, err := rand.Read(secretBytes); err != nil {
		return InternalUser{}, err
	}

	return InternalUser{
		Id:               uuid.New().String(),
		Username:         user.Username,
		Password:         string(hash),
		ConnectedClients: []string{},
		Options: UserOptions{
			LockOnInvalidConnectionKey: true,
			ConnectionKeyHmacSecret:    string(secretBytes),
		},
	}, nil
}
