package Victim

import (
	"encoding/base64"
	"errors"
	"net/http"

	"github.com/goccy/go-json"
	"golang.org/x/net/websocket"
	connection "server.com/src/models"
	"server.com/src/utils"
)

// WsVictim type definition for websocket message
type WsVictim struct {
	VictimID    string
	Message     chan []byte //... i think this is pretty straight forward
	IsConnected bool
	Connection  *websocket.Conn
}

func (w WsVictim) Prepare(r *http.Request) (WsVictim, error) {

	var connectionKey connection.ConnectionKey

	if w.VictimID != "" {
		return w, nil
	}

	encodedKey := r.Header.Get(utils.CONNECTION_KEY_HEADER)
	if encodedKey == "" {
		return WsVictim{}, errors.New("victim is not authenticated")
	}

	decodedKey, err := base64.RawStdEncoding.DecodeString(encodedKey)
	if err != nil {
		return WsVictim{}, err
	}

	err = json.Unmarshal(decodedKey, &connectionKey)
	if err != nil {
		return WsVictim{}, err
	}

	return WsVictim{
		VictimID:    connectionKey.ConnectionKeyID,
		Message:     make(chan []byte),
		IsConnected: true,
		Connection:  nil,
	}, nil
}
