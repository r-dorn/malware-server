package connection

import (
	"crypto/hmac"
	"crypto/rand"
	"crypto/sha256"
	"encoding/base64"
	"encoding/hex"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

var DEFAULT_TTL time.Time = time.Now()

func init() {
	DEFAULT_TTL.Add(time.Hour * 2)
}

type ConnectionKey struct {
	AuthCode        string
	ConnectionKeyID string
	OwnedBy         string
	AllowedVictims  []string
}

type JsonConnectionKey struct {
	EncodedKey string
}

func (c ConnectionKey) Encode() (string, error) {
	keyBytes, err := json.Marshal(c)
	if err != nil {
		return "", err
	}
	return base64.RawStdEncoding.EncodeToString(keyBytes), nil
}

func GenerateConnectionKey(userID string, codeLen int, ttl time.Duration) (ConnectionKey, error) {
	generatedBytes := make([]byte, codeLen)
	if _, err := rand.Read(generatedBytes); err != nil {
		return ConnectionKey{}, err
	}

	return ConnectionKey{
		AuthCode:        hex.EncodeToString(generatedBytes),
		ConnectionKeyID: uuid.NewString(),
		OwnedBy:         userID,
	}, nil
}

func (c ConnectionKey) CalcuateConnectionKeyHmac(secret []byte, connectionKey ConnectionKey) (string, error) {
	JsonBytes, err := json.Marshal(connectionKey)
	if err != nil {
		return "", err
	}
	mac := hmac.New(sha256.New, secret)
	_, err = mac.Write(JsonBytes)
	if err != nil {
		return "", err
	}
	generatedHmac := mac.Sum(nil)
	return base64.RawStdEncoding.EncodeToString(generatedHmac), nil
}
